{"version":3,"sources":["actions/index.js","util/util.js","components/MonstersTable/GeneralInfo.js","components/MonstersTable/SpecialAbilities.js","components/MonstersTable/MonsterActions.js","components/MonstersTable/MonsterLegendaryActions.js","components/MonstersTable/SpellList.js","components/MonstersTable/MonsterModal.js","components/MonstersTable/MonstersTable.js","App.js","reducers/index.js","reducers/pageMonsters.js","reducers/monsterInfo.js","reducers/monsterSpells.js","serviceWorker.js","index.js"],"names":["getPageMonstersAction","nextUrl","dispatch","a","response","axios","get","type","payload","data","searchTermAction","term","getMonsterInfoAction","url","getMonsterSpellsAction","urls","promises","spellsArray","map","push","all","util","abilityScore","initialValue","i","strength","dexterity","constitution","intelligence","wisdom","charisma","GeneralInfo","renderMonsterGeneralInfo","languages","props","monsterInfo","split","Container","Row","className","size","Col","alignment","armor_class","hit_points","hit_dice","speed","walk","swim","fly","burrow","length","language","key","perception","abililityModCalculator","renderMonsterDmgProperties","damage_vulnerabilities","damage_resistances","damage_immunities","condition_immunities","Card","Body","_","isEmpty","Fragment","ListGroup","variant","element","Item","renderMonsterSenses","senses","savingThrows","this","save_id","value","name","lookup","replace","skills","Accordion","Toggle","as","Header","eventKey","Collapse","React","Component","connect","state","SpecialAbilities","renderSpellCasting","spellcasting","spellsColumns","dataField","text","formatter","cell","times","componentsRequired","components_required","toString","level","class","ability","dc","modifier","school","keyField","columns","spells","renderAbilityDescription","console","log","Alert","desc","dc_type","dc_value","usage","specialAbilities","special_abilities","eventKeyCounter","defaultActiveKey","MonsterActions","action","attack_bonus","damage_bonus","damage_dice","monsterActions","actions","renderActionDescription","MonsterLegendaryActions","legendary_actions","legendary_desc","SpellList","spellList","renderSpellDetails","spellInfo","components","range","duration","ritual","concentration","casting_time","monsterSpells","style","textAlign","Spinner","animation","marginTop","spell","level_int","bindActionCreators","MonsterModal","onSpellTabSelected","setState","showMonsterSpells","showMonstersLegendaryActions","showMonsterActions","showSpecialAbilities","spell_list","Modal","show","showMonsterModal","onHide","handleMonsterModalClose","closeButton","challenge_rating","ButtonGroup","Button","onClick","disabled","monsterTableColumns","MonstersTable","handleMonsterModalOpen","handlePreviousButtonPress","pageMonsters","previous","handleNextButtonPress","next","enterPressed","e","searchMonster","updateSearchTerm","searchTerm","target","rowEvents","row","slug","showSpecialFeatures","InputGroup","Prepend","Text","FormControl","onKeyPress","onChange","aria-label","bootstrap4","classes","rowClasses","results","filter","filterFactory","App","allMonsters","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3dc7de24.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getPageMonstersAction = (nextUrl = null) => async dispatch =>{\r\n    //const response = await axios.get(\"https://www.dnd5eapi.co/api/monsters\");\r\n    // trying out a different api\r\n    let response = \"\"\r\n    if(nextUrl) {\r\n        response = await axios.get(nextUrl);\r\n    } else {\r\n        response = await axios.get(\"https://api.open5e.com/monsters\");\r\n    }\r\n    if(response) {\r\n      dispatch({type: 'SET_PAGE_MONSTERS', payload: response.data});   \r\n    }\r\n};\r\n\r\nexport const searchTermAction = (term) => async dispatch => {\r\n    const response = await axios.get(`https://api.open5e.com/monsters/?search=${term}`)\r\n    if(response) {\r\n        dispatch({type: \"SET_PAGE_MONSTERS\", payload:response.data})\r\n    }\r\n}\r\n\r\nexport const getMonsterInfoAction = (url) => async dispatch => {\r\n    const response = await axios.get(`https://api.open5e.com/monsters/${url}`);\r\n    if(response){\r\n        dispatch({type: 'SET_MONSTER_INFO', payload: response.data})\r\n    }\r\n};\r\n\r\nexport const getMonsterSpellsAction = (urls) => async dispatch => {\r\n    \r\n    let promises = [];\r\n    let spellsArray = [];\r\n\r\n    urls.map((url) => { \r\n        promises.push(axios.get(url));\r\n        return null;\r\n    })\r\n\r\n    const responses = await axios.all(promises);\r\n\r\n    responses.map((response) => {\r\n        spellsArray.push(response.data);\r\n        return null;\r\n    })  \r\n\r\n    dispatch({type: \"SET_MONSTER_SPELLS\", payload: spellsArray})\r\n\r\n    return spellsArray;\r\n}","const util = {};\r\n\r\nutil.abililityModCalculator = (abilityScore) => {\r\n    var initialValue = -5;\r\n    for(var i=1; i<=abilityScore; i++) {\r\n        if(i%2 === 0) {\r\n            initialValue++;\r\n        }\r\n    }\r\n    return initialValue;\r\n}\r\n\r\nutil.lookup = {\r\n    strength : \"STR\",\r\n    dexterity: \"DEX\",\r\n    constitution: \"CON\",\r\n    intelligence: \"INT\",\r\n    wisdom: \"WIS\",\r\n    charisma: \"CHA\"\r\n}\r\n\r\nexport default util;","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport util from '../../util/util';\r\n\r\n//react-bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass GeneralInfo extends React.Component {\r\n\r\n    renderMonsterGeneralInfo = () => {\r\n        \r\n        let languages = this.props.monsterInfo ? this.props.monsterInfo.languages.split(',') : \"\";\r\n\r\n        return (<Container>\r\n            {/* <BootstrapTable bootstrap4 keyField='name' columns={monsterGeneralInfoTableColumns} data={data}/> */}\r\n            <Row className='general-info-row'>\r\n                { this.props.monsterInfo.size && <Col><span className=\"title\">Size: </span><span>{this.props.monsterInfo.size}</span></Col>}\r\n                { this.props.monsterInfo.type && <Col><span className=\"title\">Type: </span><span>{this.props.monsterInfo.type}</span></Col>}\r\n                { this.props.monsterInfo.alignment && <Col><span className=\"title\">Alignment: </span><span>{this.props.monsterInfo.alignment}</span></Col>}\r\n            </Row>\r\n            <Row className='general-info-row'>\r\n                { this.props.monsterInfo.armor_class && <Col><span className=\"title\">AC: </span><span>{this.props.monsterInfo.armor_class}</span></Col>}\r\n                { this.props.monsterInfo.hit_points && <Col><span className=\"title\">HP: </span><span>{this.props.monsterInfo.armor_class}</span></Col>}\r\n                { this.props.monsterInfo.hit_dice && <Col><span className=\"title\">Hit Dice: </span><span>{this.props.monsterInfo.hit_dice}</span></Col>}\r\n            </Row>\r\n            \r\n            <Row className='general-info-row'>\r\n                {this.props.monsterInfo.speed && \r\n                    <Col>\r\n                    <span>\r\n                    <span className=\"title\">Speed:</span> \r\n                    {this.props.monsterInfo.speed.walk && <span><span> Walk: </span><span>{this.props.monsterInfo.speed.walk} </span></span>}\r\n                    {this.props.monsterInfo.speed.swim && <span><span>Swim: </span><span>{this.props.monsterInfo.speed.swim} </span></span>}\r\n                    {this.props.monsterInfo.speed.fly && <span><span>Fly: </span><span>{this.props.monsterInfo.speed.fly} </span></span>}\r\n                    {this.props.monsterInfo.speed.burrow && <span><span>Burrow: </span><span>{this.props.monsterInfo.speed.burrow} </span></span>}\r\n                    </span>\r\n                    </Col>}\r\n                \r\n                {languages.length > 0 && <Col>\r\n                    <span className=\"title\">\r\n                        Languages:\r\n                    </span>\r\n                    {languages.map((language)=>{\r\n                        return <span key={language}>&nbsp;{language}</span>\r\n                    })}\r\n                </Col>}\r\n\r\n                {this.props.monsterInfo.perception && <Col>\r\n                    <span className=\"title\">Perception: </span>\r\n                    <span>{this.props.monsterInfo.perception}</span>        \r\n                </Col>}\r\n            </Row>\r\n            \r\n            <hr/>\r\n            <Row className=\"info-row\">\r\n                <Col>\r\n                    <div className=\"ability-mod\">{util.abililityModCalculator(this.props.monsterInfo.strength)}</div>\r\n                    <div className=\"ability-score\">{this.props.monsterInfo.strength}</div>\r\n                    <div className=\"title-ability\">STR</div>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"ability-mod\">{util.abililityModCalculator(this.props.monsterInfo.dexterity)}</div>\r\n                    <div className=\"ability-score\">{this.props.monsterInfo.dexterity}</div>\r\n                    <div className=\"title-ability\">DEX</div>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"ability-mod\">{util.abililityModCalculator(this.props.monsterInfo.constitution)}</div>\r\n                    <div className=\"ability-score\">{this.props.monsterInfo.constitution}</div>\r\n                    <div className=\"title-ability\">CON</div>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"ability-mod\">{util.abililityModCalculator(this.props.monsterInfo.intelligence)}</div>\r\n                    <div className=\"ability-score\">{this.props.monsterInfo.intelligence}</div>\r\n                    <div className=\"title-ability\">INT</div>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"ability-mod\">{util.abililityModCalculator(this.props.monsterInfo.wisdom)}</div>\r\n                    <div className=\"ability-score\">{this.props.monsterInfo.wisdom}</div>\r\n                    <div className=\"title-ability\">WIS</div>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"ability-mod\">{util.abililityModCalculator(this.props.monsterInfo.charisma)}</div>\r\n                    <div className=\"ability-score\">{this.props.monsterInfo.charisma}</div>\r\n                    <div className=\"title-ability\">CHAR</div>\r\n                </Col>\r\n            </Row>\r\n            \r\n            \r\n        </Container>)\r\n    }\r\n\r\n    renderMonsterDmgProperties = () => {\r\n        var damage_vulnerabilities = this.props.monsterInfo.damage_vulnerabilities.split(\",\");\r\n        var damage_resistances = this.props.monsterInfo.damage_resistances.split(\",\");\r\n        var damage_immunities = this.props.monsterInfo.damage_immunities.split(\",\");\r\n        var condition_immunities = this.props.monsterInfo.condition_immunities.split(',');\r\n\r\n        return <Card.Body>\r\n        {!_.isEmpty(damage_vulnerabilities[0]) && <React.Fragment>\r\n            <h5 className='dmg-property-title'>Vulnerabilities</h5>\r\n            <ListGroup variant=\"flush\">\r\n            {damage_vulnerabilities.map((element)=> {\r\n                return <ListGroup.Item key={element}>{element}</ListGroup.Item>\r\n            })}\r\n            </ListGroup>\r\n        </React.Fragment>}\r\n        {!_.isEmpty(damage_resistances[0]) && <React.Fragment>\r\n            <h5 className='dmg-property-title'>Resistances</h5>\r\n            <ListGroup variant=\"flush\">\r\n            {damage_resistances.map((element)=> {\r\n                return <ListGroup.Item key={element}>{element}</ListGroup.Item>\r\n            })}\r\n            </ListGroup>\r\n        </React.Fragment>}\r\n        {!_.isEmpty(damage_immunities[0]) && <React.Fragment>\r\n            <h5 className='dmg-property-title'>Immunities</h5>\r\n            <ListGroup variant=\"flush\">\r\n            {damage_immunities.map((element)=> {\r\n                return <ListGroup.Item key={element}>{element}</ListGroup.Item>\r\n            })}\r\n            </ListGroup>\r\n        </React.Fragment>}\r\n        {!_.isEmpty(condition_immunities[0]) && <React.Fragment>\r\n            <h5 className='dmg-property-title'>Condition Immunities</h5>\r\n            <ListGroup variant=\"flush\">\r\n            {condition_immunities.map((element)=> {\r\n                return <ListGroup.Item key={element}>{element}</ListGroup.Item>\r\n            })}\r\n            </ListGroup>\r\n        </React.Fragment>}\r\n        </Card.Body>\r\n    } \r\n\r\n    renderMonsterSenses = () => {\r\n        var senses = this.props.monsterInfo ? this.props.monsterInfo.senses.split(',') : \"\";\r\n        return <Card.Body>\r\n        <ListGroup variant=\"flush\">\r\n        {\r\n            senses.map((element) => {\r\n            return <ListGroup.Item key={element}>\r\n                <span>{element} </span>\r\n            </ListGroup.Item>\r\n            })\r\n        }\r\n        </ListGroup>\r\n        </Card.Body>\r\n    }\r\n\r\n    render() {\r\n        var savingThrows = {}; \r\n\r\n        if(this.props.monsterInfo) {\r\n            [\"strength_save\",\"dexterity_save\",\"constitution_save\",\"intelligence_save\",\"wisdom_save\",\"charisma_save\"].map((save_id) => {\r\n                if(this.props.monsterInfo[save_id]){\r\n                    savingThrows[save_id] = this.props.monsterInfo[save_id];\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return <React.Fragment>\r\n                    {this.props.monsterInfo && this.renderMonsterGeneralInfo()}\r\n\r\n                    {!_.isEmpty(savingThrows) && \r\n                    <Container>\r\n                    <h5 className=\"underlined-title\">Saving Throws</h5>\r\n                    <Row className='info-row'>\r\n                        {_.map(savingThrows,(value, name)=>{\r\n                        if(value){\r\n                            return <Col key={name}>\r\n                                <span className=\"title\">{`${util.lookup[name.replace(\"_save\",\"\")]}: `}</span>\r\n                                <span>{value}</span>\r\n                            </Col>\r\n                        }\r\n                        })}  \r\n                    </Row>\r\n                    </Container>}\r\n\r\n                    {this.props.monsterInfo && !_.isEmpty(this.props.monsterInfo.skills) && <Container> \r\n                                <h5 className=\"underlined-title\">Skills</h5>\r\n                                <Row className=\"info-row\">\r\n                                    {_.map(this.props.monsterInfo.skills,(value, name)=>{\r\n                                    return <Col key={name}>\r\n                                        <span className=\"title\">{`${name}: `}</span>\r\n                                        <span>{value}</span>\r\n                                    </Col>\r\n                                    })}  \r\n                                </Row>   \r\n                                </Container>}\r\n                    <Accordion>\r\n                    {this.props.monsterInfo && (this.props.monsterInfo.damage_vulnerabilities || this.props.monsterInfo.damage_resistances || this.props.monsterInfo.damage_immunities) && \r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                        Vulnerabilities / Resistances / Inmunities\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                        {this.renderMonsterDmgProperties()}\r\n                        </Accordion.Collapse>\r\n                    </Card>}\r\n\r\n                    {this.props.monsterInfo && !_.isEmpty(this.props.monsterInfo.senses) && \r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n                        Senses\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                        {this.renderMonsterSenses()}\r\n                        </Accordion.Collapse>\r\n                    </Card>}\r\n                    </Accordion>\r\n                </React.Fragment>\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    //Whatever is returned will show up as props inside of BookList.\r\n    return {\r\n      monsterInfo: state.monsterInfo\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(GeneralInfo);","import React from 'react'\r\nimport _ from 'lodash';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n//react-bootstrap components\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n\r\nclass SpecialAbilities extends React.Component {\r\n\r\n    renderSpellCasting = (spellcasting) => {\r\n        const spellsColumns = [{\r\n            dataField: 'name',\r\n            text: \"Name\"\r\n        },{\r\n            dataField: 'usage',\r\n            text: \"Usage\",\r\n            formatter: (cell) => {\r\n                if(cell){\r\n                    return  cell.times ? <span><span>{cell.times} </span><span>{cell.type}</span></span> : <span>{cell.type}</span>;\r\n                }\r\n                return \"--\";\r\n            }\r\n        },{\r\n            dataField: 'level',\r\n            text: \"Level\",\r\n            formatter: (cell) => {\r\n                if(cell  || cell > -1) {\r\n                    return cell;\r\n                }\r\n                return \"--\";\r\n            }\r\n        }]\r\n\r\n        let componentsRequired = spellcasting.components_required.length > 0 ? _.toString(spellcasting.components_required) : null;\r\n\r\n        return <div>\r\n            <Row className=\"info-row\">\r\n                {spellcasting.level && <Col><span class='title'>Level: </span><span>{spellcasting.level}</span></Col>}\r\n                {spellcasting.ability && <Col><span class='title'>Ability: </span><span>{spellcasting.ability.name}</span></Col>}\r\n                {spellcasting.dc && <Col><span className=\"title\">DC: </span><span>{spellcasting.dc}</span></Col>}\r\n                {spellcasting.modifier && <Col><span className=\"title\">Modifier: </span><span>{spellcasting.modifier}</span></Col>}  \r\n            </Row>\r\n            <Row className=\"info-row\">\r\n                {spellcasting.school && <Col><span className=\"title\">School: </span><span>{spellcasting.school}</span></Col>}  \r\n                {componentsRequired && <Col><span className=\"title\">Components Required: </span><span>{componentsRequired}</span></Col>}     \r\n            </Row>\r\n            <h5>Spells</h5>    \r\n            <BootstrapTable keyField='name' columns={spellsColumns} data={spellcasting.spells}/>\r\n        </div>;\r\n    }\r\n\r\n    renderAbilityDescription = (ability) => {\r\n        console.log(ability);\r\n        return <React.Fragment>\r\n                    <Alert variant=\"info\">\r\n                        {ability.desc}\r\n                    </Alert>\r\n                    {ability.spellcasting && this.renderSpellCasting(ability.spellcasting)}\r\n                    <Row>\r\n                        {ability.dc && <Col><span className=\"title\">DC: </span><span>{`${ability.dc.dc_type.name} ${ability.dc.dc_value}`}</span></Col>}\r\n                        {ability.usage && <Col><span className=\"title\">Usage: </span><span>{`${ability.usage.times ? ability.usage.times : \"\"} ${ability.usage.type ? ability.usage.type : \"\"}`}</span></Col>}\r\n                    </Row> \r\n                </React.Fragment>;\r\n    }\r\n\r\n    render() { \r\n        let specialAbilities = this.props.monsterInfo ? this.props.monsterInfo.special_abilities : null;\r\n        let eventKeyCounter = -1;\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {\r\n                    specialAbilities && specialAbilities.map((element) => {\r\n                        eventKeyCounter++;\r\n                        return <Card key={element.name}>\r\n                                    <Accordion.Toggle as={Card.Header} eventKey={eventKeyCounter}>\r\n                                        {element.name}\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey={eventKeyCounter}>\r\n                                        <Card.Body>\r\n                                        {this.renderAbilityDescription(element)}\r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>;       \r\n                    })\r\n                }    \r\n            </Accordion>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    //Whatever is returned will show up as props inside of BookList.\r\n    return {\r\n      monsterInfo: state.monsterInfo\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SpecialAbilities);\r\n","import React from 'react'\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n//react-bootstrap components\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nclass MonsterActions extends React.Component {\r\n    \r\n    renderActionDescription(action) {\r\n        console.log(action);\r\n        return <React.Fragment>\r\n            <Alert variant=\"info\">\r\n                        {action.desc}\r\n            </Alert>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        {(action.attack_bonus || typeof action.attack_bonus == \"number\") && <div><span className=\"title\">Attack Bonus: </span><span>{action.attack_bonus}</span></div>}\r\n                        {action.damage_bonus && <div><span className=\"title\">Damage Bonus: </span><span>{action.damage_bonus}</span></div>}\r\n                        {action.damage_dice && <div><span className=\"title\">Damage Dice: </span><span>{action.damage_dice}</span></div>}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    }\r\n\r\n    render() { \r\n        let monsterActions = this.props.monsterInfo ? this.props.monsterInfo.actions : null;\r\n        let eventKeyCounter = -1;\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {\r\n                    monsterActions && monsterActions.map((element) => {\r\n                        eventKeyCounter++;\r\n                        return <Card key={element.name}>\r\n                                    <Accordion.Toggle as={Card.Header} eventKey={eventKeyCounter}>\r\n                                        {element.name}\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey={eventKeyCounter}>\r\n                                        <Card.Body>\r\n                                        {this.renderActionDescription(element)}\r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>;       \r\n                    })\r\n                }    \r\n            </Accordion>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    //Whatever is returned will show up as props inside of BookList.\r\n    return {\r\n      monsterInfo: state.monsterInfo\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(MonsterActions);","import React from 'react'\r\nimport _ from 'lodash';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n//react-bootstrap components\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nclass MonsterLegendaryActions extends React.Component {\r\n    \r\n    renderActionDescription(action) {\r\n        console.log(action);\r\n        return <React.Fragment>\r\n            <Alert variant=\"info\">\r\n                        {action.desc}\r\n            </Alert>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        {(action.attack_bonus || typeof action.attack_bonus == \"number\") && <div><span className=\"title\">Attack Bonus: </span><span>{action.attack_bonus}</span></div>}\r\n                        {action.damage_bonus && <div><span className=\"title\">Damage Bonus: </span><span>{action.damage_bonus}</span></div>}\r\n                        {action.damage_dice && <div><span className=\"title\">Damage Dice: </span><span>{action.damage_dice}</span></div>}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    }\r\n\r\n    render() { \r\n        let MonsterLegendaryActions = this.props.monsterInfo ? this.props.monsterInfo.legendary_actions : null;\r\n        let eventKeyCounter = -1;\r\n        return(\r\n            <Container>\r\n                <Row>\r\n                    {this.props.monsterInfo && this.props.monsterInfo.legendary_desc !== \"\" && \r\n                         <Alert variant=\"info\">\r\n                         {this.props.monsterInfo.legendary_desc}\r\n                        </Alert>\r\n                    }\r\n                </Row>\r\n                <Accordion defaultActiveKey=\"0\">\r\n                    {\r\n                        typeof MonsterLegendaryActions === \"object\" && !_.isEmpty(MonsterLegendaryActions) && MonsterLegendaryActions.map((element) => {\r\n                            eventKeyCounter++;\r\n                            return <Card key={element.name}>\r\n                                        <Accordion.Toggle as={Card.Header} eventKey={eventKeyCounter}>\r\n                                            {element.name}\r\n                                        </Accordion.Toggle>\r\n                                        <Accordion.Collapse eventKey={eventKeyCounter}>\r\n                                            <Card.Body>\r\n                                            {this.renderActionDescription(element)}\r\n                                            </Card.Body>\r\n                                        </Accordion.Collapse>\r\n                                    </Card>;       \r\n                        })\r\n                    }    \r\n                </Accordion>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    //Whatever is returned will show up as props inside of BookList.\r\n    return {\r\n      monsterInfo: state.monsterInfo\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(MonsterLegendaryActions);","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getMonsterSpellsAction} from '../../actions/index';\r\nimport {bindActionCreators} from 'redux';\r\n\r\n//react-bootstrap components\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row  from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nclass SpellList extends React.Component {\r\n    \r\n    state = {\r\n        spellList: []\r\n    }\r\n\r\n    renderSpellDetails = (spellInfo) => {\r\n        return (\r\n            <Card.Body>\r\n                <Container>\r\n                    <Row className=\"info-row\">\r\n                        <Alert variant=\"info\">\r\n                            {spellInfo.desc}\r\n                        </Alert>\r\n                    </Row>\r\n                    <Row className=\"info-row\">\r\n                        <Col>\r\n                            <span className=\"title\">School: </span><span>{spellInfo.school}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"title\">Components: </span><span>{spellInfo.components}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"title\">Range: </span><span>{spellInfo.range}</span>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"info-row\">\r\n                        <Col>\r\n                            <span className=\"title\">Duration: </span><span>{spellInfo.duration}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"title\">Ritual: </span><span>{spellInfo.ritual}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"title\">Concentration: </span><span>{spellInfo.concentration}</span>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"info-row\">\r\n                        <Col>\r\n                            <span className=\"title\">Casting Time: </span><span>{spellInfo.casting_time}</span>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>               \r\n            </Card.Body>\r\n        )\r\n    }\r\n    \r\n    render() {\r\n        console.log(this.props.monsterSpells);\r\n        var eventKeyCounter = -1;\r\n\r\n        if(_.isEmpty(this.props.monsterSpells)) {\r\n            return <div style={{textAlign: \"center\"}}>\r\n                <Spinner animation=\"grow\"/>\r\n            </div>\r\n        }\r\n\r\n        return <Accordion style={{marginTop: \"10px\"}}>\r\n            {!_.isEmpty(this.props.monsterSpells) && this.props.monsterSpells.map((spell) => {\r\n                eventKeyCounter++;\r\n                return <Card key={spell.name}>\r\n                <Accordion.Toggle as={Card.Header} eventKey={eventKeyCounter}>\r\n                    <Row>\r\n                        <Col style={{textAlign: \"left\"}}>\r\n                            {spell.name}\r\n                        </Col>\r\n                        <Col style={{textAlign: \"right\"}}>\r\n                            <span className=\"title\">Level: </span>\r\n                            <span>{spell.level_int}</span>\r\n                        </Col>\r\n                    </Row>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={eventKeyCounter}>\r\n                  {this.renderSpellDetails(spell)}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            })}\r\n        </Accordion>\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    //Whatever is returned will show up as props inside of BookList.\r\n    return {\r\n      monsterInfo: state.monsterInfo,\r\n      monsterSpells: state.monsterSpells\r\n    };\r\n  }\r\n\r\n  function mapDispatchToProps(dispatch){\r\n    // Whenever selectBook is called, the result should be passed to all of our reducers.\r\n    return bindActionCreators({\r\n        getMonsterSpellsAction\r\n    }, \r\n      dispatch);\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(SpellList);","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getMonsterSpellsAction} from '../../actions/index';\r\nimport {bindActionCreators} from 'redux';\r\n\r\n//my components\r\nimport GeneralInfo from './GeneralInfo';\r\nimport SpecialAbilities from './SpecialAbilities';\r\nimport MonsterActions from './MonsterActions';\r\nimport MonsterLegendaryActions from './MonsterLegendaryActions';\r\nimport SpellList from './SpellList';\r\n\r\n//react-bootstrap components\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n  \r\nclass MonsterModal extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          showSpecialAbilities: false,\r\n          showMonsterActions: false,\r\n          showMonstersLegendaryActions: false,\r\n          showMonsterSpells: false\r\n        }\r\n    }\r\n\r\n    onSpellTabSelected = () => {\r\n        this.setState({showMonsterSpells: true,showMonstersLegendaryActions: false, showMonsterActions: false, showSpecialAbilities: false}); \r\n        let urls = this.props.monsterInfo ? this.props.monsterInfo.spell_list : null;\r\n        this.props.getMonsterSpellsAction(urls);\r\n    }\r\n\r\n    render() {\r\n        return <Modal show={this.props.showMonsterModal} onHide={this.props.handleMonsterModalClose} size={\"lg\"} className=\"search-modal\">\r\n                    <Modal.Header closeButton>\r\n                        <Container>\r\n                            <Row>\r\n                                <div className=\"monster-name-cr-container\">\r\n                                    <div className=\"monster-name\">\r\n                                        {this.props.monsterInfo ? this.props.monsterInfo.name : \"\"}\r\n                                    </div>\r\n                                    <div className=\"monster-cr\">\r\n                                        CR {this.props.monsterInfo ? this.props.monsterInfo.challenge_rating : \"--\"}\r\n                                    </div>\r\n                                </div>\r\n                            </Row>\r\n                            <Row>\r\n                                <div className=\"buttons-container\">\r\n                                    <ButtonGroup>\r\n                                    <Button className=\"menu-button\" variant=\"secondary\" onClick={()=>{this.setState({showSpecialAbilities: false, showMonsterActions: false, showMonstersLegendaryActions: false, showMonsterSpells: false})}} disabled={!this.state.showSpecialAbilities && !this.state.showMonsterActions && !this.state.showMonstersLegendaryActions && !this.state.showMonsterSpells}>General Info</Button>\r\n                                    <Button className=\"menu-button\" variant=\"secondary\" onClick={()=>{this.setState({showSpecialAbilities: true, showMonsterActions: false, showMonstersLegendaryActions:false, showMonsterSpells: false})}} disabled={this.state.showSpecialAbilities}>Special abilities</Button>\r\n                                    {this.props.monsterInfo && !_.isEmpty(this.props.monsterInfo.spell_list) && <Button className=\"menu-button\" variant=\"secondary\" onClick={this.onSpellTabSelected} disabled={this.state.showMonsterSpells}>Spell List</Button>}\r\n                                    <Button className=\"menu-button\" variant=\"secondary\" onClick={()=>{this.setState({showMonsterActions: true, showSpecialAbilities: false, showMonstersLegendaryActions: false, showMonsterSpells: false})}} disabled={this.state.showMonsterActions}>Actions</Button>\r\n                                    {this.props.monsterInfo && !_.isEmpty(this.props.monsterInfo.legendary_actions) && <Button className=\"menu-button\" variant=\"secondary\" onClick={()=>{this.setState({showMonstersLegendaryActions: true, showMonsterActions: false, showSpecialAbilities: false, showMonsterSpells: false})}} disabled={this.state.showMonstersLegendaryActions}>Legendary Actions</Button>}\r\n                                    </ButtonGroup>\r\n                                </div>\r\n                            </Row>\r\n                        </Container>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {(!this.state.showSpecialAbilities && !this.state.showMonsterActions && !this.state.showMonstersLegendaryActions && !this.state.showMonsterSpells) && <GeneralInfo/>}\r\n                        {this.state.showSpecialAbilities && <SpecialAbilities/>}\r\n                        {this.state.showMonsterActions && <MonsterActions/>}\r\n                        {this.state.showMonstersLegendaryActions && <MonsterLegendaryActions/>}\r\n                        {this.state.showMonsterSpells && <SpellList/>}\r\n                    </Modal.Body>\r\n                </Modal>}\r\n} \r\n\r\nfunction mapStateToProps(state){\r\n    //Whatever is returned will show up as props inside of BookList.\r\n    return {\r\n      monsterInfo: state.monsterInfo\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    // Whenever selectBook is called, the result should be passed to all of our reducers.\r\n    return bindActionCreators({\r\n        getMonsterSpellsAction\r\n    }, \r\n      dispatch);\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MonsterModal);","import React from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getPageMonstersAction,\r\n        getMonsterInfoAction,\r\n        searchTermAction} from '../../actions/index';\r\nimport {bindActionCreators} from 'redux';\r\n\r\n\r\n\r\n//my components\r\nimport MonsterModal from './MonsterModal.js';\r\n\r\n// //react-bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\n//react-bootstrap-table2\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory from 'react-bootstrap-table2-filter';\r\n\r\nimport './MonstersTable.css';\r\n\r\nconst monsterTableColumns = [{\r\n  dataField: 'name',\r\n  text: 'Monster Name'\r\n},{\r\n  dataField: 'type',\r\n  text: 'Type'\r\n},{\r\n  dataField: 'challenge_rating',\r\n  text: 'CR'\r\n}];\r\n\r\nclass MonstersTable extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMonsterModal: false,\r\n      showSpecialFeatures: false,\r\n      showMonsterActions: false,\r\n      searchTerm: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() { \r\n    this.props.getPageMonstersAction();\r\n  }\r\n\r\n  handleMonsterModalOpen = () => { \r\n    this.setState({showMonsterModal: true});\r\n  }\r\n\r\n  handleMonsterModalClose = () => {\r\n    this.setState({showMonsterModal: false});\r\n  }\r\n\r\n  handlePreviousButtonPress = () => { \r\n    this.props.getPageMonstersAction(this.props.pageMonsters.previous);\r\n  }\r\n\r\n  handleNextButtonPress = () => {\r\n    this.props.getPageMonstersAction(this.props.pageMonsters.next);\r\n  }\r\n\r\n  enterPressed = (e) => {\r\n    if(e.key === \"Enter\") {\r\n      this.searchMonster();\r\n    }\r\n  }\r\n\r\n  updateSearchTerm = (e) => {\r\n    this.setState({searchTerm: e.target.value})\r\n  }\r\n\r\n  searchMonster = () => {\r\n    console.log(this.state.searchTerm);\r\n    this.props.searchTermAction(this.state.searchTerm);\r\n  }\r\n\r\n\r\n  rowEvents = {\r\n    onClick: (e,row) => {\r\n        this.props.getMonsterInfoAction(row.slug);\r\n        this.handleMonsterModalOpen();\r\n    }\r\n  };\r\n\r\n  render() {  \r\n    return (\r\n      <Container>\r\n        {this.props.pageMonsters && \r\n        <React.Fragment>\r\n          \r\n          <Row className=\"info-row\">\r\n            \r\n            <Col style={{textAlign: \"left\"}}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text onClick={this.searchMonster}><i className=\"fas fa-search\"></i></InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl onKeyPress={this.enterPressed} onChange={(e)=>{this.updateSearchTerm(e)}}/>\r\n              </InputGroup>\r\n            </Col>\r\n            \r\n            <Col style={{textAlign: \"right\"}}>\r\n              <ButtonGroup aria-label=\"Basic example\">\r\n                <Button variant=\"secondary\" disabled={!this.props.pageMonsters.previous} onClick={this.handlePreviousButtonPress}><i className=\"fas fa-chevron-circle-left\"></i></Button>\r\n                <Button variant=\"secondary\" disabled={!this.props.pageMonsters.next} onClick={this.handleNextButtonPress}><i className=\"fas fa-chevron-circle-right\"></i></Button>\r\n              </ButtonGroup>\r\n            </Col>\r\n          \r\n          </Row>\r\n\r\n          <BootstrapTable bootstrap4 classes=\"table-dark\" rowClasses=\"pointer-on-row\" keyField='name' data={ this.props.pageMonsters ? this.props.pageMonsters.results : [] } columns={ monsterTableColumns } filter={ filterFactory() } rowEvents={ this.rowEvents }/>\r\n          \r\n          <MonsterModal handleMonsterModalClose={this.handleMonsterModalClose} showMonsterModal={this.state.showMonsterModal}/>\r\n        \r\n        </React.Fragment>}\r\n      \r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  //Whatever is returned will show up as props inside of BookList.\r\n  return {\r\n    pageMonsters: state.pageMonsters,\r\n    monsterInfo: state.monsterInfo\r\n  };\r\n}\r\n\r\n//Anything returned from this function will end up as props on the BookList container.\r\nfunction mapDispatchToProps(dispatch){\r\n  // Whenever selectBook is called, the result should be passed to all of our reducers.\r\n  return bindActionCreators({\r\n    getPageMonstersAction,\r\n    getMonsterInfoAction,\r\n    searchTermAction\r\n  }, \r\n    dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MonstersTable);\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n//my components\r\nimport MonstersTable from \"./components/MonstersTable/MonstersTable\";\r\n\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  // componentDidMount() { \r\n  //   this.props.getAllMonstersAction();\r\n  // }\r\n\r\n  render() {  \r\n    return (\r\n      <div>\r\n        <MonstersTable/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  //Whatever is returned will show up as props inside of BookList.\r\n  return {\r\n    allMonsters: state.allMonsters\r\n  };\r\n}\r\n\r\n//Anything returned from this function will end up as props on the BookList container.\r\n// function mapDispatchToProps(dispatch){\r\n//   // Whenever selectBook is called, the result should be passed to all of our reducers.\r\n//   return bindActionCreators({\r\n//     getAllMonstersAction}, \r\n//     dispatch);\r\n// }\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","import { combineReducers } from 'redux';\r\nimport pageMonsters from './pageMonsters';\r\nimport monsterInfo from './monsterInfo';\r\nimport monsterSpells from './monsterSpells';\r\nconst rootReducer = combineReducers({\r\n  pageMonsters: pageMonsters,\r\n  monsterInfo: monsterInfo,\r\n  monsterSpells: monsterSpells\r\n})\r\n\r\nexport default rootReducer;\r\n","export default function(state = null , action) {\r\n    switch(action.type) {\r\n        case 'SET_PAGE_MONSTERS':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","export default function(state = null , action) {\r\n    switch(action.type) {\r\n        case 'SET_MONSTER_INFO':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","export default function(state = null , action) {\r\n    switch(action.type) {\r\n        case 'SET_MONSTER_SPELLS':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport reducers from './reducers';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}